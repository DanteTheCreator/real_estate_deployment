services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: comfyrent-postgres
    environment:
      POSTGRES_DB: comfyrent_production
      POSTGRES_USER: comfyrent_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./back-end/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - comfyrent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U comfyrent_user -d comfyrent_production"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: comfyrent-redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    env_file:
      - .env.production
    volumes:
      - redis_data:/data
    networks:
      - comfyrent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO S3 Storage
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: comfyrent-minio
    environment:
      MINIO_ROOT_USER_FILE: /run/secrets/minio_root_user
      MINIO_ROOT_PASSWORD_FILE: /run/secrets/minio_root_password
    secrets:
      - minio_root_user
      - minio_root_password
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - comfyrent-network
    restart: unless-stopped

  # Backend API (includes scraper)
  backend:
    build:
      context: ./back-end
      dockerfile: Dockerfile
    container_name: comfyrent-backend
    env_file:
      - .env.production
    ports:
      - "8000:8000"
    secrets:
      - postgres_password
      - minio_root_password
      - jwt_secret_key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    networks:
      - comfyrent-network
    restart: unless-stopped
    volumes:
      - scraper_data:/app/data
      - scraper_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend
  frontend:
    build:
      context: ./renting-front
      dockerfile: Dockerfile
    container_name: comfyrent-frontend
    env_file:
      - renting-front/.env.production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - comfyrent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scraper Service (runs every 6 hours)
  scraper:
    build:
      context: ./back-end
      dockerfile: Dockerfile
    container_name: comfyrent-scraper
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=comfyrent_production
      - POSTGRES_USER=comfyrent_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    env_file:
      - .env.production
    secrets:
      - postgres_password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - comfyrent-network
    restart: unless-stopped
    volumes:
      - scraper_data:/app/data
      - scraper_logs:/app/logs
    command: |
      sh -c "
        echo 'Starting MyHome.ge scraper service...';
        while true; do
          echo '[$(date)] Running incremental scrape...';
          python /app/scraper/advanced_myhome_scraper.py --mode incremental --max-properties 2000 --report-format json;
          echo '[$(date)] Scrape completed. Sleeping for 6 hours...';
          sleep 21600;
        done
      "

# Secrets
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  minio_root_user:
    file: ./secrets/minio_root_user.txt
  minio_root_password:
    file: ./secrets/minio_root_password.txt
  jwt_secret_key:
    file: ./secrets/jwt_secret_key.txt

# Networks
networks:
  comfyrent-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  scraper_data:
    driver: local
  scraper_logs:
    driver: local
