services:
  # Production PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: comfyrent-postgres
    environment:
      POSTGRES_DB: comfyrent_production
      POSTGRES_USER: comfyrent_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./back-end/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - comfyrent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U comfyrent_user -d comfyrent_production"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and session management
  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    container_name: comfyrent-redis
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    networks:
      - comfyrent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -a $(cat /run/secrets/redis_password) ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MinIO S3-compatible storage
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: comfyrent-minio
    environment:
      MINIO_ROOT_USER_FILE: /run/secrets/minio_root_user
      MINIO_ROOT_PASSWORD_FILE: /run/secrets/minio_root_password
    secrets:
      - minio_root_user
      - minio_root_password
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - comfyrent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:9000/minio/health/live || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Backend API
  backend:
    build:
      context: ./back-end
      dockerfile: Dockerfile.production
      args:
        - BUILD_ENV=production
    container_name: comfyrent-backend
    env_file:
      - .env.production
    ports:
      - "8000:8000"
    secrets:
      - postgres_password
      - minio_root_password
      - jwt_secret_key
      - redis_password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    networks:
      - comfyrent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Frontend
  frontend:
    build:
      context: ./renting-front
      dockerfile: Dockerfile.production
      args:
        - BUILD_ENV=production
    container_name: comfyrent-frontend
    env_file:
      - renting-front/.env.production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - comfyrent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Scraper (Refactored)
  scraper:
    build:
      context: ./back-end
      dockerfile: scraper/Dockerfile.production
      args:
        - BUILD_ENV=production
    container_name: comfyrent-scraper
    env_file:
      - .env.production
    environment:
      # Database connection
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=comfyrent_production
      - POSTGRES_USER=comfyrent_user
      # Logging
      - LOG_LEVEL=INFO
    secrets:
      - postgres_password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - comfyrent-network
    restart: unless-stopped
    volumes:
      - scraper_logs:/app/logs
      - scraper_data:/app/data
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Container handles startup automatically via Dockerfile

  # Multilingual Content Processor (Integrated Worker)
  multilingual_worker:
    build:
      context: ./back-end
      dockerfile: Dockerfile.production
      args:
        - BUILD_ENV=production
    container_name: comfyrent-multilingual-worker
    env_file:
      - .env.production
    environment:
      # Worker configuration
      - BATCH_SIZE=10
      - CHECK_INTERVAL=300  # Check every 5 minutes
      - MODE=new
      # Database connection
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=comfyrent_production
      - POSTGRES_USER=comfyrent_user
      # Logging
      - LOG_LEVEL=INFO
      # Enable multilingual processing for this worker
      - SCRAPER_CONCURRENT_LANGUAGES=true
    secrets:
      - postgres_password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - comfyrent-network
    restart: unless-stopped
    volumes:
      - multilingual_logs:/app/logs
      - ./multilingual-worker/logs:/app/worker_logs
    command: ["python", "/app/scraper/multilingual_worker.py", "--continuous", "--batch-size", "10"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Production Secrets
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  minio_root_user:
    file: ./secrets/minio_root_user.txt
  minio_root_password:
    file: ./secrets/minio_root_password.txt
  jwt_secret_key:
    file: ./secrets/jwt_secret_key.txt
  redis_password:
    file: ./secrets/redis_password.txt

# Production Networks
networks:
  comfyrent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Production Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  scraper_logs:
    driver: local
  scraper_data:
    driver: local
  multilingual_logs:
    driver: local
