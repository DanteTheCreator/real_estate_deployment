# Multi-stage production build for Scraper
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_ENV=production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install requirements from backend
COPY ../back-end/requirements.txt /tmp/
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Production stage
FROM python:3.11-slim

# Create non-root user
RUN groupadd -r scraper && useradd -r -g scraper -s /bin/false scraper

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH"

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Set working directory
WORKDIR /app

# Create logs directory for app logging
RUN mkdir -p /app/logs

# Copy backend files needed for scraper
COPY --chown=scraper:scraper ../back-end/enhanced_scraper_with_db.py .
COPY --chown=scraper:scraper ../back-end/schemas.py .
COPY --chown=scraper:scraper ../back-end/database.py .
COPY --chown=scraper:scraper ../back-end/config.py .

# Set proper permissions
RUN chown -R scraper:scraper /app

# Switch to non-root user
USER scraper

# Health check
HEALTHCHECK --interval=60s --timeout=30s --start-period=30s --retries=2 \
    CMD pgrep -f "python.*enhanced_scraper" || exit 1

# Run scraper
CMD ["python", "enhanced_scraper_with_db.py"]
